- FSM (Finite State Machine, 유한 상태 머신)
한 개의 State만 가질 수 있고 State는 다른 State로 갈 수 있는 전이(Transition)을 가짐
다만 FSM은 State가 많아지고 전이가 많아지면 복잡해지고 코드를 알아보기 힘들다는 단점이 존재

이를 개선해서 여러 State들을 그룹화하는 HFSM같은 개념도 있지만 FSM이라는 개념에서 벗어나지 못함


반면 Behaviour Tree(BT)는 트리로 나타내지기에 더 알아보기 좋음. 또한 각 동작을 하는 노드를 재사용하기 쉬움
무엇보다 각 노드가 전이에 대한 생각을 하지 않아 더 명확한 의미 전달이 됨


- BT
	- 루트(root)
	- 흐름 제어 코드(flow-control node)
		- Sequence node : and 역할을 하는 노드
		- Selector node : or 역할을 하는 노드
	- 리프 노드(leaf node, actio node) : 실제 행동이 들어가 있는 노드

루트에서 여러 흐름제어 노드를 타고 내려가 최종 리프 노드에 도달하는 형태임. 트리의 리프 노드는 항상 Acton을 담고 있어야 하고 루트와 리프를 제외하고는 전부 흐름 제어 노드들이 차지

각 노드는 3가지 상태 중 하나를 가질 수 있음
	- Success
	- Failure
	- Running


- Sequence node
	- and 역할
		- 하나라도 Failure라면 Failure 반환
	- 아니라면 Running, Success중 반환 (Running이 우선순위 높음)

- Selector Node
	- or 역할
	- 하나라도 Running이거나 Success라면 바로 반환

각 노드의 경우 'Evaluate()'와 같은 함수를 가지고 있어 이 함수에서 각 노드의 행동을 하고 상태를 반환